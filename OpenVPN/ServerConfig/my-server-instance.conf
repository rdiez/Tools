
proto udp4

# The default UDP port is 1194.
# A non-standard port number lowers somewhat the risk of attack.
# If you are using a firewall like ufw, you need to open the corresponding port.
port 1194

# If you want, you can bind to just one local IP address as follows.
# This way, the OpenVPN server will not be available on all network interfaces:
#   local 192.168.100.2

# Note that the TUN/TAP network interface name is limited to 15 characters,
# see IFNAMSIZ in the Linux kernel.
dev OpenVpnSrvTap
dev-type tap


# Do not attempt to use a shared secret key like this:
#   secret static.key
# It will not work in the end. Unfortunately, you have to bite the bullet and use certificates.
#
# Security is a pain with OpenVPN. It is very expensive for a small business to deal with a certificate authority.
# The idea that every signed certificate grants you access is also detriment to security.
# Employees will come and go, so you will have to revoke certificates.
#
# As of November 2021, the following example configuration file does not mention the 'crl-verify' directive:
#    https://github.com/OpenVPN/openvpn/blob/master/sample/sample-config-files/server.conf
# This is a serious documentation issue. The unwary will believe that the example configuration file
# is sufficient, but it is not. Revocation is necessay, and implementing it is unnecessarily expensive.
#
# OpenVPN revocation works as a blacklist, which is not a very reliable method. Make a small system configuration
# mistake, and all revoked certificates work again. This is why I am using a tls-verify script
# instead of relying on revocation.
#
# The kind of security you really want here is a list of shared secrets, one per client.
# OpenVPN should then implement automatic perfect forward secrecy for all such client connections.
#
# Note that upcoming OpenVPN version 2.6 will have a directive named "--peer-fingerprint" to provide
# an easier alternative to tls-verify.

ca   my-server-instance/ca.crt      # Certificate authority for the server and all the clients, aka the root certificate.
cert my-server-instance/server.crt  # This server's signed certificate.
key  my-server-instance/server.key  # This server's private key.
dh   none  # Parameters for the Diffie Hellman key exchange, but we are using elliptic curve (EASYRSA_ALGO ec) instead.

# With 'tls-crypt', the key file is not only used to sign and verify packets (like 'tls-auth' does),
# but also to encrypt the control channel.
tls-crypt my-server-instance/ta.key

# We need to relax the external program security restriction, because we need to call the tls-verify script.
script-security 2

# Directive 'tls-verify' is full of shortcomings. It is expensive to spawn an external process for each
# certificate verification depth. And you need to relax the 'script-security' directive to be able
# to launch this external script.
# It would have been better to start this script once, before OpenVPN drops security privileges.
# Then the script should forever read text lines with the certificate data to validate,
# and answer for example on stdout.
# Or even better: OpenVPN should have built-in support for such a common case of allowing only the listed clients.
tls-verify "/openvpn-allowed-clients/tls-verify-script.pl  /openvpn-allowed-clients/allowed-clients.txt"


# The first IP address after "server-bridge" is passed down to the client as "route-gateway x.x.x.x".
# The second and third IP addresses delimit the DHCP range for OpenVPN clients. Make sure that your
# local DHCP server will no hand those addresses out to normal LAN clients.
server-bridge  192.168.100.2  255.255.255.0  192.168.100.121   192.168.100.129


# Certain Windows-specific network settings can be pushed to clients, such as DNS or WINS server addresses.
# We can push a WINS server address here too, see the manpage for details. But WINS servers
# are long deprecated in favour of DNS.
#
# These DHCP options are currently ignored by Linux OpenVPN clients. However, they can be passed as environment variables
# to an external script which can then honour them. See the documentation for OpenVPN's --dhcp-option for more information.
push "dhcp-option DNS 192.168.100.1"

# This directive allows different clients to "see" each other, as OpenVPN internally routes client-to-client traffic.
client-to-client

# The 'keepalive' directive causes ping-like messages to be sent back and forth over
# the link, so that each side knows when the other side is no longer responding
# and a reconnection should be attempted. If one of the IP addresses change,
# this mechanism allows for a timely reconnection. The trouble is, OpenVPN's ping
# configuration is strange, and there is no way to pick a good value.
#
# Say you specify directive "keepalive 3 7". This directive is automatically pushed to the clients,
# so both server and client will send ping-like messages every 3 seconds.
# Unlike standard TCP/IP ping packets, these messages are not echoed by the other side.
# The client will timeout the connection if it does not receive a ping-like message
# within 7 seconds, which in this example means than 2 such ping messages went lost or
# have been greatly delayed. The server waits twice as long, which would be 7 * 2 = 14 seconds.
#
# You need a ping timeout for these reasons:
#
# - To keep the connection established through stateful firewalls.
#   Some NAT gateways have an inactivity timeout of 60 seconds for UDP connections.
#   Using TCP for the VPN connection allows much longer intervals,
#   but tunneling over TCP has its own issues.
#
# - To recycle connection slots on the server.
#   If your IP address pool is small, constant connection losses may temporarily
#   exhaust the pool. A workaround is to not specify option 'duplicate-cn',
#   but a different policy in this area has an organisational impact.
#
# - To react quickly to connection loss, instead of hanging for a long time.
#
# This constant pinging will have a negative effect on mobile phone battery life,
# so you should not ping too often.
#
# It is not clearly documented what the default timeout is on the server side,
# and there is not much official guidance about choosing these timing parameters.
#
# Ideally, the server should specify a maximum timeout, so that it can quickly drop
# or recycle unresponsive connections, and the client should be able to specify
# a lower timeout if it wishes a faster response to connection problems at the cost
# of decreasing battery life. However, this flexibility is not possible with OpenVPN.
keepalive 3 7

# Do not enable compression on the VPN link.
# From OpenVPN version 2.5, this directive is considered risky and is warned against,
# because attacks exist leveraging compression-inside-crypto to reveal plaintext (VORACLE).
#   compress lz4-v2
#   push "compress lz4-v2"

# The maximum number of concurrently connected clients we want to allow.
max-clients 100

# Directive 'duplicate-cn' allows one certificate to establish several simulteanous connections.
# This is mainly a policy decision that affects the level of security and the amount of administration work.
# Do you want to issue a certificate per user? Or one per user device?
duplicate-cn

# Try to preserve some state across restarts. This also tries to avoid accessing certain resources on restart
# that may no longer be accessible because of the privilege downgrade.
persist-key
persist-tun

# Notify the client when the server restarts so it can automatically reconnect.
explicit-exit-notify 1

# Downgrade privileges after initialisation (ignored on Windows).
# You would normally use these settings:
#   user  nobody
#   group nogroup
# However, we need to execute the tls-verify script with a particular user account.
user  openvpn-unpriviledged-user
group openvpn-unpriviledged-user

# Directive 'status' outputs a short status file showing current connections, truncated and rewritten every minute.
#
#   status /var/log/openvpn/openvpn-status.log
#
# I am not sure how this file is created and updated. This may affect reliability. If the file is updated in place,
# and some process is reading it at the same time, the list of connections may get corrupted.
#
# Directive 'status-version' controls the file format, but none of the formats is properly documented,
# at least as of April 2019.
#
# There does not seem to be any directive to control the file permissions.
#
# As an alternative, see the 'management' directive.
#
# If you want to manually have a look at the current connections,
# this status information can also be written to the syslog by sending a SIGUSR2 signal.
#
# If you just want to see what clients have connected recently, look for lines like the following
# in the server log file. These lines get written from a log verbosity level 1 onwards:
#
#   [clientname] Peer Connection Initiated with [AF_INET]192.168.100.xxx:32864
#
# Note that, under Ubuntu 18.04 and 20.04, the default systemd service configuration passes the following command-line argument:
#   --status %t/openvpn-server/status-%i.log
# Therefore, the log file may already be active on your system, usually with a filename like this:
#   /run/openvpn-server/status-my-server-instance.log

# Set the appropriate level of log file verbosity (optional).
#
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
verb 4

# Silence repeating messages. At most 20 sequential messages of the same message
# category will be output to the log.
# This is rarely useful, because it does not suppress the same messages, but any messages
# of the same type.
#   mute 20
