This file is written in Perl's Plain Old Documentation (POD) format
and has been generated with option --help-pod .
Run the following Perl commands to convert it to HTML or to plain text for easy reading:

  pod2html README.pod >README.html
  pod2text README.pod >README.txt


=head1 OVERVIEW

RDChecksum version 0.79

Creates, updates or verifies a list of file checksums (hashes).

=head1 RATIONALE

In an ideal world, all filesystems would have integrated data checksums like ZFS does.
This tool is a poor man's substitute for such filesystem-level checksums.
It can also help detect data corruption when transferring files over a network.

Storage devices are supposed to use checksums to detect or even correct data errors,
and most data transport protocols should do the same. However, computer systems are becoming
more complex and more brittle at the same time, often due to economic pressure.

As a result, I have very rarely performed a large backup or file copy operation without hitting some data
integrity issue. For example, interrupting with Ctrl+C an rsync transfer to an SMB network share
tends to corrupt the destination files, and resuming the transfer will not fix such corruption.

There are many alternative checksum/hash tools around, but I decided to write a new one out of frustration
with the existing software. Advantages of this tool are:

=over

=item *

Checksum list file update

If only a few files have changed, there is no need to checksum all of them again.
None of the other checksum tools I know of have this feature.
I actually wrote this tool because I found that very irritating.

See option I<< --updateS< > >>.

=item *

Resumable verification.

I often verify large amounts of data on conventional hard disks, and it can take hours to complete.
But sometimes I need to interrupt the process, or perhaps I inadvertently close the wrong terminal window.
All other checksum tools I know will then restart from scratch, which is very annoying, as it is
an unnecessary waste of my precious time.

See option I<< --resume-from-lineS< > >>.

=item *

It is possible to automate the processing of files that failed verification.

The verification report file has a legible but strict data format. An automated tool
can parse it and, for example, copy all failed files again.

=back

Instead of using a checksum/hash tool, you could use an intrusion detection tool
like Tripwire, AIDE, Samhain, afick, OSSEC or integrit,
as most of them can also checksum files and test for changes on demand.
However, I tried or evaluated a few such tools and found them rather user unfriendly and not flexible enough.

For disadvantages and other issues of RDChecksum see the CAVEATS section below.

=head1 USAGE

 rdchecksum.pl --create [options] [--] [directory]

 rdchecksum.pl --update [options] [--] [directory]

 rdchecksum.pl --verify [options]

Argument 'directory' is optional and defaults to the current directory ('.').

If 'directory' is the current directory ('.'), then the filenames in the checksum list file will be like 'file.txt'.
Otherwise, the filenames will be like 'directory/file.txt'.

The directory path is not normalised, except for removing any trailing slashes. For example, "file.txt" and "././file.txt"
will be considered different files.

The specified directory will be scanned for files, and then each subdirectory will be recursively scanned.
The resulting order looks like this:

 dir1/file1.txt
 dir1/file2.txt
 dir1/subdir1/file.txt
 dir1/subdir1/subdir/file.txt
 dir1/subdir2/file.txt

The checksum list file itself (FileChecksums.txt by default) and any other temporary files with that basename
will be automatically skipped from the checksum list file (assuming that the checksum list filename's basedir and
argument 'directory' match, because mixing relative and absolute paths will confuse the script).

Usage examples:

 cd somewhere && rdchecksum.pl --create

 cd somewhere && rdchecksum.pl --verify

=head1 OPTIONS

Command-line options are read from environment variable I<< RDCHECKSUM_OPTIONS >> first, and then from the command line.

=over

=item *

B<-h, --help>

Print this help text.

=item *

B<--help-pod>

Preprocess and print the POD section. Useful to generate the README.pod file.

=item *

B<--version>

Print this tool's name and version number (0.79).

=item *

B<--license>

Print the license.

=item *

B<< --self-test >>

Run the built-in self-tests.

=item *

B<-->

Terminate options processing. Useful to avoid confusion between options and filenames
that begin with a hyphen ('-'). Recommended when calling this script from another script,
where the filename comes from a variable or from user input.

=item *

B<< --create  >>

Creates a checksum list file.

Non-regular files, such as FIFOs (named pipes), will be automatically skipped.

When creating a checksum list file named F<< FileChecksums.txt >>S< >, a temporary file named F<< FileChecksums.txt.inProgress >>
will also be created. If this script is interrupted, the temporary file will remain behind.

=item *

B<< --update  >>

Updates a checksum list file.

Files that do not exist anymore on disk will be deleted from the checksum list file, and new files will be added.

For those files that are still on disk, their checksums will only be updated if their sizes or I<< last modified >> timestamps have changed,
unless option I<< --always-checksum >> is specified.

Make sure you pass the same directory as you did when creating the checksum list file. Otherwise, all files will be checksummed again.

When updating a checksum list file named F<< FileChecksums.txt >>S< >, a temporary file named F<< FileChecksums.txt.inProgress >>
will also be created. If this script is interrupted, the temporary file will remain behind. If the update succeeds, the previous file will
be renamed to F<< FileChecksums.txt.previous >>S< >.

=item *

B<< --verify  >>

Verifies the files listed in the checksum list file.

A report file named F<< FileChecksums.txt.verification.report >> will be created. Only failed files will show up in the report.

It is possible to parse the report in order to automatically process the files that failed verification.

Temporary files F<< FileChecksums.txt.verification.resume >> and
F<< FileChecksums.txt.verification.resume.tmp >> will be created and may remain behind if the script gets killed.
See I<< --resume-from-line >> for more information.

You may want to flush the disk cache before verifying. Otherwise, you may be testing some of the files
from memory, so you wouldn't notice if they are actually corrupt on disk.

=item *

B<< --checksum-file=filename >>

Specifies the checksum list file to create, update or verify.

The default filename is F<< FileChecksums.txtS< > >>.

=item *

B<< --checksum-type=xxx >>

Supported checksum types are:

=over

=item * I<< CRC-32 >>

Unsafe for protecting against intentional modification.

=item * I<< Adler-32 >>

Faster than CRC-32, but weak for small files. Unsafe for protecting against intentional modification.

=item * I<< none >>

No checksum will be calculated or verified. Only the file metadata (size and I<< last modified >> timestamp) will be used.

=back

The default checksum type is I<< CRC-32 >>. This option's argument is case insensitive.

Changes in the checksum type only take effect when a checksum is recalculated for a file.
Existing entries in the checksum list file will not be modified.
Therefore, you may want to recreate the checksum list file from scratch if you select a different checksum type.

=item * B<< --always-checksum >>

When updating a checksum list file, do not skip files that have apparently not changed,
according the file size and I<< last modified >> timestamp, but always recalculate the checksum.

This way, the indication whether a file has changed becomes reliable, at the cost of disk performance.

=item *

B<< --resume-from-line=n >>

Before starting verification, skip (nS< >-S< >1) text lines at the beginning of F<< FileChecksums.txt >>S< >.
This option allows you to manually resume a previous, unfinished verification.

During verification, file F<< FileChecksums.txt.verification.resume >> is created and periodically updated
with the latest verified line number. The update period is one minute. In order to guarantee an atomic update,
temporary file F<< FileChecksums.txt.verification.resume.tmp >> will be created and then moved
to the final filename.

If verification is completed, F<< FileChecksums.txt.verification.resume >> is automatically deleted, but
if verification is interrupted, F<< FileChecksums.txt.verification.resume >> will remind behind
and will contain the line number you can resume from. It the script gets suddenly killed and cannot gracefully stop,
the line number in that file will lag up to the update period, and the temporary file might also be left behind.

Before resuming, remember to rename or copy the last report file (should you need it), because it will be overwritten,
so you will then lose the list of files that had failed the previous verification attempt.

=item *

B<< --verbose >>

Print the name of each file and directory found on disk.

Without this option, operations --create, --update and --verify display a progress indicator every few seconds.

=item *

B<< --no-update-messages >>

During an update, do not display which files in the checksum list file are new, missing or have changed.

=item *

B<< --include=regex >>

See section FILTERING FILENAMES WITH REGULAR EXPRESSIONS below.

=item *

B<< --exclude=regex >>

See section FILTERING FILENAMES WITH REGULAR EXPRESSIONS below.

=back

=head1 FILTERING FILENAMES WITH REGULAR EXPRESSIONS

Filename filtering only applies to operations --create and --updateS< >.

Say you run this tool as follows:

 rdchecksum.pl --create dir1

The specified directory F<< dir1 >> is not subject to any filtering.

Let us say that the first filename found on disk is F<< dir1/fileA.txt >>S< >.

All --include and --exclude options are applied as Perl regular expressions against "dir1/fileA.txt",
in the same order as these options are given on the command line. The first expression that matches wins.

If no regular expression matches:

=over

=item *

If all filtering expressions are --includeS< >, the file will be excluded.

=item *

If at least one --exclude option is present, the file will be included.

=back

Let us say that a subdirectory named F<< dir1/dir2 >> is also found. Before descending into it, all
--include and --exclude options are applied against "dir1/dir2/".
Note the trailing slash.

If the directory is excluded, nothing else underneath will be considered anymore.

The regular expression itself is internally converted into UTF-8 first, and is applied against pathnames
that are coded in UTF-8 too, so there should not be any issues with international characters.

=head2 FILTERING EXAMPLES

=over

=item *

Skip files that end with '.jpg':

  --exclude='\.jpg\z'

We are using \z instead of the usual $ to match the end of the filename,
in case the filename contains new-line characters.

Directory names end with a slash ('/'), so they will not match.

The single quoting (') is there just to minimise interference from the shell.
Otherwise, we would have to quote special shell characters such as '\' and '$'.

=item *

Skip files that end with either '.jpg' or '.jpeg':

 --exclude='\.(jpg|jpeg)\z'

=item *

Skip files that end with either '.jpg' or '.jpeg', but case insensitively,
so that .JPG and .jpEg would also match:

 --exclude='(?i)\.(jpg|jpeg)\z'

=item *

Include only files that end with '.txt':

 --include='/\z'  --include='\.txt\z'

The /\z rule means "anything that ends with a slash" and allows descending into all subdirectories.
Otherwise, directory names that do not match the .txt rule will be filtered out too.

=item *

Do not descend into any subdirectories:

  --exclude='/\z'

Anything that ends with a slash is a directory.

Matching just a slash anywhere may not work properly, because if there is a starting directory like S<< "my-dir" >>,
then filenames at top-level will be like S<< "my-dir/file.txt" >>. Therefore, the slash needs to match only at the end,
in order to prevent descending into a directory like S<< "my-dir/subdir/" >>.

=item *

Skip all subdirectories named 'tmp':

  --exclude='(\A|/)tmp/\z'

Including a trailing slash after 'tmp' makes sure it only matches directories, and not files.

Expression (\A|/) will match either from the beginning, so "tmp/" will match,
or after a slash, so that a subdirectory like "abc/tmp/" will match too. A name like "/xtmp" will not match.

The \z is there to match the slash only at the end. Otherwise, if the starting directory itself is called "tmp",
then a top-level file like "tmp/file.txt" will be filtered out too. Matching the slash only at the end
avoids the risk of filtering out the starting directory specified on the command line.


=item *

Skip all files which names start with a digit or an ASCII lowecase letter:

  --exclude='(?xx)  (\A|/)  [0-9 a-z]  [^/]*  \z'

(?xx) makes the expression more readable by allowing spaces between components (unquoted spaces will be discarded).

(\A|/) indicates that matching must start right at the beginning of the path, or after a slash.
Otherwise, filenames such as !abc and dir/!abc will also match, even though they start with '!'.

0-9 matches digits, and a-z matches lowercase ASCII letters (there are 26 of them, so letters with diacritical marks
are not included). The brackets [0-9 a-z] mean that one such character must exist.

[^/]* allows for any characters afterwards, as long as it is not a slash. We want to match only filenames,
so any slashes to the right are to be avoided.

\z specifies that the end of the path must come at this point. Without it, other slashes to the right
of the match would still be tolerated.

=back

=head1 EXIT CODE

Exit code: 0 on success, some other value on error or if interrupted by a signal.

=head1 SIGNALS

Reception of signals SIGTERM, SIGINT (usually Ctrl+C) and SIGHUP (usually closing the terminal window)
make this script gracefully stop the current operation. The script then kills itself with the same signal.
Most other signals will kill the script straight away.

SIGHUP will probably not be handled as a normal request to stop if you close the terminal,
because writing to sdtout or stderr will fail immediately and will make this script
quit beforehand.

=head1 USING I<< background.sh >>

It is probably most convenient to run this tool with another script of mine called I<< background.sh >>S< >,
so that it runs with low priority and you get a visual notification when finished. For example:

 background.sh rdchecksum.pl --verify

=head1 CHECKSUM LIST FILE FORMAT

The generated file with the list of checksums looks like this:

 2019-12-31T20:15:01.200  CRC-32  12345678  1,234,567  subdir/file1.txt
 2019-12-31T20:15:01.300  CRC-32  90ABCDEF  2,345,678  subdir/file2.txt

=head1 CAVEATS

=over

=item *

This tools is rather young and could benefit from more options.

If you need more features, drop me a line.

=item *

You can only specify one directory as the starting point.

If you want to process multiple directories on different locations at once,
you can work-around it by placing symlinks to all those directories into a single directory,
and passing that single directory to RDChecksum.

=item *

When updating a checksum list file, the logic that detects whether a file has changed can be fooled
if you move and rename files around, so that previous filenames and their file sizes still match.
The reason ist that move and rename operations do not change the file's I<< last modified >> timestamp.

This shortcoming is not unique to RDChecksum, you can fool GNU Make this way too.

If preventing this scenario is important to you, use option I<< --always-checksum >>.

=item *

If you move or rename files or directories, this tool will neither detect it nor update the
checksum list file accordingly. The affected files will be processed again from scratch
on the next checksum list file update, as if they were new or missing files.

=item *

The granularity level is one file.

If you data consists of a single huge file, you will not be able to resume an interrupted verification.

=item *

Processing is single threaded.

If you have a very fast SSD and a multicore processor, you will probably be waiting longer than necessary.

When using conventional disks (HDDs), reading several files in parallel would probably only decrease performance,
due to the permanent seeks. So implementing multiprocessing would only really help with SSDs.

This script could also benefit from asynchronous I/O, but that would not bring a lot, because
checksumming is usually pretty fast compared to disk I/O, and because operating systems normally
implement a pretty good "read ahead" optimisation when your program mainly issues
sequential disk reads.

=item *

There is no symbolic link loop detection (protection against circular links).

In such a situation, this tool will run forever.

=item *

Memory usage will be higher than with alternative tools.

The main reason is that this script needs to sort the list of filenames inside each directory traversed,
in order to support the --update operation later on. All filenames in the current directory
are loaded into memory, and part of them will remain in memory while descending to its subdirectories.

Therefore, if you have directories with a huge number of files or subdirectories, you will see increased memory usage.
CPU usage may also be higher than expected due to the sorting operation.

=item *

UTF-8 assumption

This tool assumes that all filenames returned from syscalls like readdir are encoded in UTF-8.

It should be the case in all modern operating systems. There is no other encoding that will actually work in practice anyway.
Note that the Linux kernel does not enforce any particular encoding nor provides encoding information to userspace.

=item *

Running on a native Perl under Microsoft Windows may cause problems.

Support for drive letters like C: when dealing with absolute pathnames is missing.
But this limitation is probably not hard to fix.

There is also the issue of UTF-8 in filenames, but you can probably configure the way Windows
interacts with non-Unicode applications to overcome this problem.

I would be willing to help if you volunteer testing the changes under Windows.

In the meantime, you can always use Cygwin. Windows 10 even has a Linux subsystem nowadays.

=item *

Using RDChecksum on large amounts of data may flush the Linux filesystem cache and impact
the performance of other processes.

This shortcoming is not unique to RDChecksum, but to any tool processing lots of file data.
I have written a small summary about this cache flushing issue:

L<< https://rdiez.miraheze.org/wiki/The_Linux_Filesystem_Cache_is_Braindead >>

One way to overcome this issue is to use syscall I<< posix_fadvise >>S< >. Unfortunately,
Perl provides no easy access to it. I have raised a GitHub issue about this:

S<  >Title: Provide access to posix_fadvise

S<  >Link: L<< https://github.com/Perl/perl5/issues/17899 >>

=back

=head1 FEEDBACK

Please send feedback to rdiezmail-tools at yahoo.de

=head1 LICENSE

Copyright (C) 2020-2022 R. Diez

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License version 3 as published by
the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License version 3 for more details.

You should have received a copy of the GNU Affero General Public License version 3
along with this program.  If not, see L<http://www.gnu.org/licenses/>.

=cut
